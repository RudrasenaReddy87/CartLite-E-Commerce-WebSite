{"ast":null,"code":"/**\r\n * Advanced Search Utilities for E-commerce\r\n * Features: Fuzzy search, debouncing, relevance scoring, suggestions\r\n */\n\n// Fuzzy search algorithm using Levenshtein distance\nexport const levenshteinDistance = (str1, str2) => {\n  const matrix = [];\n  const len1 = str1.length;\n  const len2 = str2.length;\n  if (len1 === 0) return len2;\n  if (len2 === 0) return len1;\n\n  // Initialize matrix\n  for (let i = 0; i <= len1; i++) {\n    matrix[i] = [i];\n  }\n  for (let j = 0; j <= len2; j++) {\n    matrix[0][j] = j;\n  }\n\n  // Fill matrix\n  for (let i = 1; i <= len1; i++) {\n    for (let j = 1; j <= len2; j++) {\n      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n      matrix[i][j] = Math.min(matrix[i - 1][j] + 1,\n      // deletion\n      matrix[i][j - 1] + 1,\n      // insertion\n      matrix[i - 1][j - 1] + cost // substitution\n      );\n    }\n  }\n  return matrix[len1][len2];\n};\n\n// Calculate search relevance score\nexport const calculateRelevanceScore = (product, searchTerm) => {\n  const term = searchTerm.toLowerCase();\n  let score = 0;\n\n  // Exact name match gets highest score\n  if (product.name.toLowerCase() === term) {\n    score += 100;\n  }\n\n  // Name starts with search term\n  if (product.name.toLowerCase().startsWith(term)) {\n    score += 80;\n  }\n\n  // Name contains search term\n  if (product.name.toLowerCase().includes(term)) {\n    score += 60;\n  }\n\n  // Description contains search term\n  if (product.description.toLowerCase().includes(term)) {\n    score += 40;\n  }\n\n  // Category match bonus\n  if (product.category.toLowerCase().includes(term)) {\n    score += 30;\n  }\n\n  // Fuzzy matching for typos (allow 1-2 character differences)\n  const nameWords = product.name.toLowerCase().split(' ');\n  const descWords = product.description.toLowerCase().split(' ');\n  nameWords.forEach(word => {\n    if (word.length >= 4) {\n      // Only for longer words\n      const distance = levenshteinDistance(word, term);\n      if (distance <= 2) {\n        score += Math.max(0, 20 - distance * 5);\n      }\n    }\n  });\n  descWords.forEach(word => {\n    if (word.length >= 4) {\n      const distance = levenshteinDistance(word, term);\n      if (distance <= 2) {\n        score += Math.max(0, 10 - distance * 3);\n      }\n    }\n  });\n  return score;\n};\n\n// Debounce function for search input\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// Get search suggestions based on partial input\nexport const getSearchSuggestions = (products, searchTerm, maxSuggestions = 5) => {\n  if (!searchTerm || searchTerm.length < 2) return [];\n  const term = searchTerm.toLowerCase();\n  const suggestions = new Map();\n  products.forEach(product => {\n    // Check product name\n    const nameWords = product.name.toLowerCase().split(' ');\n    nameWords.forEach(word => {\n      if (word.startsWith(term) && word !== term) {\n        if (!suggestions.has(word)) {\n          suggestions.set(word, {\n            text: word,\n            type: 'product',\n            product: product\n          });\n        }\n      }\n    });\n\n    // Check categories\n    if (product.category.toLowerCase().startsWith(term)) {\n      if (!suggestions.has(product.category)) {\n        suggestions.set(product.category, {\n          text: product.category,\n          type: 'category',\n          product: product\n        });\n      }\n    }\n  });\n  return Array.from(suggestions.values()).slice(0, maxSuggestions);\n};\n\n// Enhanced search function with fuzzy matching and scoring\nexport const searchProducts = (products, searchTerm, options = {}) => {\n  const {\n    fuzzy = true,\n    minScore = 10,\n    maxResults = 50,\n    sortByRelevance = true\n  } = options;\n  if (!searchTerm || searchTerm.trim().length === 0) {\n    return products;\n  }\n  const term = searchTerm.toLowerCase().trim();\n\n  // Filter products based on search criteria\n  let filteredProducts = products.filter(product => {\n    const score = calculateRelevanceScore(product, term);\n    return score >= minScore;\n  });\n\n  // Sort by relevance score if enabled\n  if (sortByRelevance) {\n    filteredProducts.sort((a, b) => {\n      const scoreA = calculateRelevanceScore(a, term);\n      const scoreB = calculateRelevanceScore(b, term);\n      return scoreB - scoreA;\n    });\n  }\n  return filteredProducts.slice(0, maxResults);\n};\n\n// Search history management\nexport const searchHistoryUtils = {\n  getHistory: () => {\n    try {\n      const history = localStorage.getItem('searchHistory');\n      return history ? JSON.parse(history) : [];\n    } catch (error) {\n      console.error('Error loading search history:', error);\n      return [];\n    }\n  },\n  addToHistory: searchTerm => {\n    try {\n      const history = searchHistoryUtils.getHistory();\n      const filteredHistory = history.filter(term => term !== searchTerm);\n      const updatedHistory = [searchTerm, ...filteredHistory].slice(0, 10); // Keep last 10 searches\n      localStorage.setItem('searchHistory', JSON.stringify(updatedHistory));\n      return updatedHistory;\n    } catch (error) {\n      console.error('Error saving search history:', error);\n      return [];\n    }\n  },\n  clearHistory: () => {\n    try {\n      localStorage.removeItem('searchHistory');\n    } catch (error) {\n      console.error('Error clearing search history:', error);\n    }\n  }\n};\n\n// Highlight search terms in text\nexport const highlightSearchTerm = (text, searchTerm) => {\n  if (!searchTerm || !text) return text;\n  const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n  return text.replace(regex, '<mark class=\"bg-yellow-200 px-1 rounded\">$1</mark>');\n};\n\n// Get popular search terms (mock data for demo)\nexport const getPopularSearches = () => {\n  return ['wireless headphones', 'smart watch', 'running shoes', 'casual shirt', 'gaming mouse', 'yoga mat', 'designer handbag', 'rose gold earrings'];\n};","map":{"version":3,"names":["levenshteinDistance","str1","str2","matrix","len1","length","len2","i","j","cost","Math","min","calculateRelevanceScore","product","searchTerm","term","toLowerCase","score","name","startsWith","includes","description","category","nameWords","split","descWords","forEach","word","distance","max","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","getSearchSuggestions","products","maxSuggestions","suggestions","Map","has","set","text","type","Array","from","values","slice","searchProducts","options","fuzzy","minScore","maxResults","sortByRelevance","trim","filteredProducts","filter","sort","a","b","scoreA","scoreB","searchHistoryUtils","getHistory","history","localStorage","getItem","JSON","parse","error","console","addToHistory","filteredHistory","updatedHistory","setItem","stringify","clearHistory","removeItem","highlightSearchTerm","regex","RegExp","replace","getPopularSearches"],"sources":["C:/Users/brudr/Desktop/anon-ecommerce-website-master/CartLite-E-Commerce-WebSite/frontend/src/utils/searchUtils.js"],"sourcesContent":["/**\r\n * Advanced Search Utilities for E-commerce\r\n * Features: Fuzzy search, debouncing, relevance scoring, suggestions\r\n */\r\n\r\n// Fuzzy search algorithm using Levenshtein distance\r\nexport const levenshteinDistance = (str1, str2) => {\r\n  const matrix = [];\r\n  const len1 = str1.length;\r\n  const len2 = str2.length;\r\n\r\n  if (len1 === 0) return len2;\r\n  if (len2 === 0) return len1;\r\n\r\n  // Initialize matrix\r\n  for (let i = 0; i <= len1; i++) {\r\n    matrix[i] = [i];\r\n  }\r\n  for (let j = 0; j <= len2; j++) {\r\n    matrix[0][j] = j;\r\n  }\r\n\r\n  // Fill matrix\r\n  for (let i = 1; i <= len1; i++) {\r\n    for (let j = 1; j <= len2; j++) {\r\n      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n      matrix[i][j] = Math.min(\r\n        matrix[i - 1][j] + 1,      // deletion\r\n        matrix[i][j - 1] + 1,      // insertion\r\n        matrix[i - 1][j - 1] + cost // substitution\r\n      );\r\n    }\r\n  }\r\n\r\n  return matrix[len1][len2];\r\n};\r\n\r\n// Calculate search relevance score\r\nexport const calculateRelevanceScore = (product, searchTerm) => {\r\n  const term = searchTerm.toLowerCase();\r\n  let score = 0;\r\n\r\n  // Exact name match gets highest score\r\n  if (product.name.toLowerCase() === term) {\r\n    score += 100;\r\n  }\r\n\r\n  // Name starts with search term\r\n  if (product.name.toLowerCase().startsWith(term)) {\r\n    score += 80;\r\n  }\r\n\r\n  // Name contains search term\r\n  if (product.name.toLowerCase().includes(term)) {\r\n    score += 60;\r\n  }\r\n\r\n  // Description contains search term\r\n  if (product.description.toLowerCase().includes(term)) {\r\n    score += 40;\r\n  }\r\n\r\n  // Category match bonus\r\n  if (product.category.toLowerCase().includes(term)) {\r\n    score += 30;\r\n  }\r\n\r\n  // Fuzzy matching for typos (allow 1-2 character differences)\r\n  const nameWords = product.name.toLowerCase().split(' ');\r\n  const descWords = product.description.toLowerCase().split(' ');\r\n\r\n  nameWords.forEach(word => {\r\n    if (word.length >= 4) { // Only for longer words\r\n      const distance = levenshteinDistance(word, term);\r\n      if (distance <= 2) {\r\n        score += Math.max(0, 20 - distance * 5);\r\n      }\r\n    }\r\n  });\r\n\r\n  descWords.forEach(word => {\r\n    if (word.length >= 4) {\r\n      const distance = levenshteinDistance(word, term);\r\n      if (distance <= 2) {\r\n        score += Math.max(0, 10 - distance * 3);\r\n      }\r\n    }\r\n  });\r\n\r\n  return score;\r\n};\r\n\r\n// Debounce function for search input\r\nexport const debounce = (func, wait) => {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n\r\n// Get search suggestions based on partial input\r\nexport const getSearchSuggestions = (products, searchTerm, maxSuggestions = 5) => {\r\n  if (!searchTerm || searchTerm.length < 2) return [];\r\n\r\n  const term = searchTerm.toLowerCase();\r\n  const suggestions = new Map();\r\n\r\n  products.forEach(product => {\r\n    // Check product name\r\n    const nameWords = product.name.toLowerCase().split(' ');\r\n    nameWords.forEach(word => {\r\n      if (word.startsWith(term) && word !== term) {\r\n        if (!suggestions.has(word)) {\r\n          suggestions.set(word, {\r\n            text: word,\r\n            type: 'product',\r\n            product: product\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check categories\r\n    if (product.category.toLowerCase().startsWith(term)) {\r\n      if (!suggestions.has(product.category)) {\r\n        suggestions.set(product.category, {\r\n          text: product.category,\r\n          type: 'category',\r\n          product: product\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  return Array.from(suggestions.values()).slice(0, maxSuggestions);\r\n};\r\n\r\n// Enhanced search function with fuzzy matching and scoring\r\nexport const searchProducts = (products, searchTerm, options = {}) => {\r\n  const {\r\n    fuzzy = true,\r\n    minScore = 10,\r\n    maxResults = 50,\r\n    sortByRelevance = true\r\n  } = options;\r\n\r\n  if (!searchTerm || searchTerm.trim().length === 0) {\r\n    return products;\r\n  }\r\n\r\n  const term = searchTerm.toLowerCase().trim();\r\n\r\n  // Filter products based on search criteria\r\n  let filteredProducts = products.filter(product => {\r\n    const score = calculateRelevanceScore(product, term);\r\n    return score >= minScore;\r\n  });\r\n\r\n  // Sort by relevance score if enabled\r\n  if (sortByRelevance) {\r\n    filteredProducts.sort((a, b) => {\r\n      const scoreA = calculateRelevanceScore(a, term);\r\n      const scoreB = calculateRelevanceScore(b, term);\r\n      return scoreB - scoreA;\r\n    });\r\n  }\r\n\r\n  return filteredProducts.slice(0, maxResults);\r\n};\r\n\r\n// Search history management\r\nexport const searchHistoryUtils = {\r\n  getHistory: () => {\r\n    try {\r\n      const history = localStorage.getItem('searchHistory');\r\n      return history ? JSON.parse(history) : [];\r\n    } catch (error) {\r\n      console.error('Error loading search history:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  addToHistory: (searchTerm) => {\r\n    try {\r\n      const history = searchHistoryUtils.getHistory();\r\n      const filteredHistory = history.filter(term => term !== searchTerm);\r\n      const updatedHistory = [searchTerm, ...filteredHistory].slice(0, 10); // Keep last 10 searches\r\n      localStorage.setItem('searchHistory', JSON.stringify(updatedHistory));\r\n      return updatedHistory;\r\n    } catch (error) {\r\n      console.error('Error saving search history:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  clearHistory: () => {\r\n    try {\r\n      localStorage.removeItem('searchHistory');\r\n    } catch (error) {\r\n      console.error('Error clearing search history:', error);\r\n    }\r\n  }\r\n};\r\n\r\n// Highlight search terms in text\r\nexport const highlightSearchTerm = (text, searchTerm) => {\r\n  if (!searchTerm || !text) return text;\r\n\r\n  const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\r\n  return text.replace(regex, '<mark class=\"bg-yellow-200 px-1 rounded\">$1</mark>');\r\n};\r\n\r\n// Get popular search terms (mock data for demo)\r\nexport const getPopularSearches = () => {\r\n  return [\r\n    'wireless headphones',\r\n    'smart watch',\r\n    'running shoes',\r\n    'casual shirt',\r\n    'gaming mouse',\r\n    'yoga mat',\r\n    'designer handbag',\r\n    'rose gold earrings'\r\n  ];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}